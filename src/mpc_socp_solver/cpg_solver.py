
"""
Auto-generated by CVXPYgen on May 26, 2025 at 22:53:23.
Content: Custom solve method for CVXPY interface.
"""

import time
import warnings
import numpy as np
from cvxpy.reductions import Solution
from cvxpy.problems.problem import SolverStats
from mpc_socp_solver import cpg_module


standard_settings_names = {}


def squeeze_scalar(val):
    if isinstance(val, np.ndarray):
        val = val.squeeze()
        if val.shape == ():
            return val.item()
    return val


def cpg_solve(prob, updated_params=None, **kwargs):

    # set flags for updated parameters
    upd = cpg_module.mpc_socp__cpg_updated()
    if updated_params is None:
        updated_params = ["param3972", "param3965", "param3966", "param3969", "param3970", "param3967", "param3968"]
    for p in updated_params:
        try:
            setattr(upd, p, True)
        except AttributeError:
            raise AttributeError(f"{p} is not a parameter.")

    # set solver settings
    cpg_module.set_solver_default_settings()
    for key, value in kwargs.items():
        try:
            eval(f'cpg_module.set_solver_{standard_settings_names.get(key, key)}(value)')
        except AttributeError:
            raise AttributeError(f'Solver setting "{key}" not available.')

    # set parameter values
    par = cpg_module.mpc_socp__cpg_params()
    param_dict = prob.param_dict
    par.param3972 = list(param_dict["param3972"].value.flatten(order="F"))
    par.param3965 = list(param_dict["param3965"].value.flatten(order="F"))
    par.param3966 = list(param_dict["param3966"].value.flatten(order="F"))
    par.param3969 = list(param_dict["param3969"].value.flatten(order="F"))
    par.param3970 = list(param_dict["param3970"].value.flatten(order="F"))
    par.param3967 = list(param_dict["param3967"].value.flatten(order="F"))
    par.param3968 = list(param_dict["param3968"].value.flatten(order="F"))

    # solve
    t0 = time.time()
    res = cpg_module.solve(upd, par)
    t1 = time.time()

    # store solution in problem object
    prob._clear_solution()
    prob.var_dict['var3963'].save_value(np.array(res.cpg_prim.var3963).reshape((14, 35), order='F'))
    prob.var_dict['var3964'].save_value(np.array(res.cpg_prim.var3964).reshape((3, 34), order='F'))
    prob.constraints[0].save_dual_value(np.array(res.cpg_dual.d0).reshape(14))
    prob.constraints[1].save_dual_value(np.array(res.cpg_dual.d1).reshape(14))
    prob.constraints[2].save_dual_value(np.array(res.cpg_dual.d2))
    prob.constraints[3].save_dual_value(np.array(res.cpg_dual.d3))
    prob.constraints[4].save_dual_value(np.array(res.cpg_dual.d4))
    prob.constraints[5].save_dual_value(np.array(res.cpg_dual.d5).reshape(14))
    prob.constraints[6].save_dual_value(np.array(res.cpg_dual.d6))
    prob.constraints[7].save_dual_value(np.array(res.cpg_dual.d7))
    prob.constraints[8].save_dual_value(np.array(res.cpg_dual.d8))
    prob.constraints[9].save_dual_value(np.array(res.cpg_dual.d9).reshape(14))
    prob.constraints[10].save_dual_value(np.array(res.cpg_dual.d10))
    prob.constraints[11].save_dual_value(np.array(res.cpg_dual.d11))
    prob.constraints[12].save_dual_value(np.array(res.cpg_dual.d12))
    prob.constraints[13].save_dual_value(np.array(res.cpg_dual.d13).reshape(14))
    prob.constraints[14].save_dual_value(np.array(res.cpg_dual.d14))
    prob.constraints[15].save_dual_value(np.array(res.cpg_dual.d15))
    prob.constraints[16].save_dual_value(np.array(res.cpg_dual.d16))
    prob.constraints[17].save_dual_value(np.array(res.cpg_dual.d17).reshape(14))
    prob.constraints[18].save_dual_value(np.array(res.cpg_dual.d18))
    prob.constraints[19].save_dual_value(np.array(res.cpg_dual.d19))
    prob.constraints[20].save_dual_value(np.array(res.cpg_dual.d20))
    prob.constraints[21].save_dual_value(np.array(res.cpg_dual.d21).reshape(14))
    prob.constraints[22].save_dual_value(np.array(res.cpg_dual.d22))
    prob.constraints[23].save_dual_value(np.array(res.cpg_dual.d23))
    prob.constraints[24].save_dual_value(np.array(res.cpg_dual.d24))
    prob.constraints[25].save_dual_value(np.array(res.cpg_dual.d25).reshape(14))
    prob.constraints[26].save_dual_value(np.array(res.cpg_dual.d26))
    prob.constraints[27].save_dual_value(np.array(res.cpg_dual.d27))
    prob.constraints[28].save_dual_value(np.array(res.cpg_dual.d28))
    prob.constraints[29].save_dual_value(np.array(res.cpg_dual.d29).reshape(14))
    prob.constraints[30].save_dual_value(np.array(res.cpg_dual.d30))
    prob.constraints[31].save_dual_value(np.array(res.cpg_dual.d31))
    prob.constraints[32].save_dual_value(np.array(res.cpg_dual.d32))
    prob.constraints[33].save_dual_value(np.array(res.cpg_dual.d33).reshape(14))
    prob.constraints[34].save_dual_value(np.array(res.cpg_dual.d34))
    prob.constraints[35].save_dual_value(np.array(res.cpg_dual.d35))
    prob.constraints[36].save_dual_value(np.array(res.cpg_dual.d36))
    prob.constraints[37].save_dual_value(np.array(res.cpg_dual.d37).reshape(14))
    prob.constraints[38].save_dual_value(np.array(res.cpg_dual.d38))
    prob.constraints[39].save_dual_value(np.array(res.cpg_dual.d39))
    prob.constraints[40].save_dual_value(np.array(res.cpg_dual.d40))
    prob.constraints[41].save_dual_value(np.array(res.cpg_dual.d41).reshape(14))
    prob.constraints[42].save_dual_value(np.array(res.cpg_dual.d42))
    prob.constraints[43].save_dual_value(np.array(res.cpg_dual.d43))
    prob.constraints[44].save_dual_value(np.array(res.cpg_dual.d44))
    prob.constraints[45].save_dual_value(np.array(res.cpg_dual.d45).reshape(14))
    prob.constraints[46].save_dual_value(np.array(res.cpg_dual.d46))
    prob.constraints[47].save_dual_value(np.array(res.cpg_dual.d47))
    prob.constraints[48].save_dual_value(np.array(res.cpg_dual.d48))
    prob.constraints[49].save_dual_value(np.array(res.cpg_dual.d49).reshape(14))
    prob.constraints[50].save_dual_value(np.array(res.cpg_dual.d50))
    prob.constraints[51].save_dual_value(np.array(res.cpg_dual.d51))
    prob.constraints[52].save_dual_value(np.array(res.cpg_dual.d52))
    prob.constraints[53].save_dual_value(np.array(res.cpg_dual.d53).reshape(14))
    prob.constraints[54].save_dual_value(np.array(res.cpg_dual.d54))
    prob.constraints[55].save_dual_value(np.array(res.cpg_dual.d55))
    prob.constraints[56].save_dual_value(np.array(res.cpg_dual.d56))
    prob.constraints[57].save_dual_value(np.array(res.cpg_dual.d57).reshape(14))
    prob.constraints[58].save_dual_value(np.array(res.cpg_dual.d58))
    prob.constraints[59].save_dual_value(np.array(res.cpg_dual.d59))
    prob.constraints[60].save_dual_value(np.array(res.cpg_dual.d60))
    prob.constraints[61].save_dual_value(np.array(res.cpg_dual.d61).reshape(14))
    prob.constraints[62].save_dual_value(np.array(res.cpg_dual.d62))
    prob.constraints[63].save_dual_value(np.array(res.cpg_dual.d63))
    prob.constraints[64].save_dual_value(np.array(res.cpg_dual.d64))
    prob.constraints[65].save_dual_value(np.array(res.cpg_dual.d65).reshape(14))
    prob.constraints[66].save_dual_value(np.array(res.cpg_dual.d66))
    prob.constraints[67].save_dual_value(np.array(res.cpg_dual.d67))
    prob.constraints[68].save_dual_value(np.array(res.cpg_dual.d68))
    prob.constraints[69].save_dual_value(np.array(res.cpg_dual.d69).reshape(14))
    prob.constraints[70].save_dual_value(np.array(res.cpg_dual.d70))
    prob.constraints[71].save_dual_value(np.array(res.cpg_dual.d71))
    prob.constraints[72].save_dual_value(np.array(res.cpg_dual.d72))
    prob.constraints[73].save_dual_value(np.array(res.cpg_dual.d73).reshape(14))
    prob.constraints[74].save_dual_value(np.array(res.cpg_dual.d74))
    prob.constraints[75].save_dual_value(np.array(res.cpg_dual.d75))
    prob.constraints[76].save_dual_value(np.array(res.cpg_dual.d76))
    prob.constraints[77].save_dual_value(np.array(res.cpg_dual.d77).reshape(14))
    prob.constraints[78].save_dual_value(np.array(res.cpg_dual.d78))
    prob.constraints[79].save_dual_value(np.array(res.cpg_dual.d79))
    prob.constraints[80].save_dual_value(np.array(res.cpg_dual.d80))
    prob.constraints[81].save_dual_value(np.array(res.cpg_dual.d81).reshape(14))
    prob.constraints[82].save_dual_value(np.array(res.cpg_dual.d82))
    prob.constraints[83].save_dual_value(np.array(res.cpg_dual.d83))
    prob.constraints[84].save_dual_value(np.array(res.cpg_dual.d84))
    prob.constraints[85].save_dual_value(np.array(res.cpg_dual.d85).reshape(14))
    prob.constraints[86].save_dual_value(np.array(res.cpg_dual.d86))
    prob.constraints[87].save_dual_value(np.array(res.cpg_dual.d87))
    prob.constraints[88].save_dual_value(np.array(res.cpg_dual.d88))
    prob.constraints[89].save_dual_value(np.array(res.cpg_dual.d89).reshape(14))
    prob.constraints[90].save_dual_value(np.array(res.cpg_dual.d90))
    prob.constraints[91].save_dual_value(np.array(res.cpg_dual.d91))
    prob.constraints[92].save_dual_value(np.array(res.cpg_dual.d92))
    prob.constraints[93].save_dual_value(np.array(res.cpg_dual.d93).reshape(14))
    prob.constraints[94].save_dual_value(np.array(res.cpg_dual.d94))
    prob.constraints[95].save_dual_value(np.array(res.cpg_dual.d95))
    prob.constraints[96].save_dual_value(np.array(res.cpg_dual.d96))
    prob.constraints[97].save_dual_value(np.array(res.cpg_dual.d97).reshape(14))
    prob.constraints[98].save_dual_value(np.array(res.cpg_dual.d98))
    prob.constraints[99].save_dual_value(np.array(res.cpg_dual.d99))
    prob.constraints[100].save_dual_value(np.array(res.cpg_dual.d100))
    prob.constraints[101].save_dual_value(np.array(res.cpg_dual.d101).reshape(14))
    prob.constraints[102].save_dual_value(np.array(res.cpg_dual.d102))
    prob.constraints[103].save_dual_value(np.array(res.cpg_dual.d103))
    prob.constraints[104].save_dual_value(np.array(res.cpg_dual.d104))
    prob.constraints[105].save_dual_value(np.array(res.cpg_dual.d105).reshape(14))
    prob.constraints[106].save_dual_value(np.array(res.cpg_dual.d106))
    prob.constraints[107].save_dual_value(np.array(res.cpg_dual.d107))
    prob.constraints[108].save_dual_value(np.array(res.cpg_dual.d108))
    prob.constraints[109].save_dual_value(np.array(res.cpg_dual.d109).reshape(14))
    prob.constraints[110].save_dual_value(np.array(res.cpg_dual.d110))
    prob.constraints[111].save_dual_value(np.array(res.cpg_dual.d111))
    prob.constraints[112].save_dual_value(np.array(res.cpg_dual.d112))
    prob.constraints[113].save_dual_value(np.array(res.cpg_dual.d113).reshape(14))
    prob.constraints[114].save_dual_value(np.array(res.cpg_dual.d114))
    prob.constraints[115].save_dual_value(np.array(res.cpg_dual.d115))
    prob.constraints[116].save_dual_value(np.array(res.cpg_dual.d116))
    prob.constraints[117].save_dual_value(np.array(res.cpg_dual.d117).reshape(14))
    prob.constraints[118].save_dual_value(np.array(res.cpg_dual.d118))
    prob.constraints[119].save_dual_value(np.array(res.cpg_dual.d119))
    prob.constraints[120].save_dual_value(np.array(res.cpg_dual.d120))
    prob.constraints[121].save_dual_value(np.array(res.cpg_dual.d121).reshape(14))
    prob.constraints[122].save_dual_value(np.array(res.cpg_dual.d122))
    prob.constraints[123].save_dual_value(np.array(res.cpg_dual.d123))
    prob.constraints[124].save_dual_value(np.array(res.cpg_dual.d124))
    prob.constraints[125].save_dual_value(np.array(res.cpg_dual.d125).reshape(14))
    prob.constraints[126].save_dual_value(np.array(res.cpg_dual.d126))
    prob.constraints[127].save_dual_value(np.array(res.cpg_dual.d127))
    prob.constraints[128].save_dual_value(np.array(res.cpg_dual.d128))
    prob.constraints[129].save_dual_value(np.array(res.cpg_dual.d129).reshape(14))
    prob.constraints[130].save_dual_value(np.array(res.cpg_dual.d130))
    prob.constraints[131].save_dual_value(np.array(res.cpg_dual.d131))
    prob.constraints[132].save_dual_value(np.array(res.cpg_dual.d132))
    prob.constraints[133].save_dual_value(np.array(res.cpg_dual.d133).reshape(14))
    prob.constraints[134].save_dual_value(np.array(res.cpg_dual.d134))
    prob.constraints[135].save_dual_value(np.array(res.cpg_dual.d135))
    prob.constraints[136].save_dual_value(np.array(res.cpg_dual.d136))

    # store additional solver information in problem object
    prob._status = "%d (for description visit https://qoco-org.github.io/qoco/)" % res.cpg_info.status
    if abs(res.cpg_info.obj_val) == 1e30:
        prob._value = np.sign(res.cpg_info.obj_val) * np.inf
    else:
        prob._value = res.cpg_info.obj_val
    primal_vars = {var.id: var.value for var in prob.variables()}
    dual_vars = {c.id: c.dual_value for c in prob.constraints}
    solver_specific_stats = {'obj_val': res.cpg_info.obj_val,
                             'status': prob._status,
                             'iter': res.cpg_info.iter,
                             'pri_res': res.cpg_info.pri_res,
                             'dua_res': res.cpg_info.dua_res,
                             'time': res.cpg_info.time}
    attr = {'solve_time': t1 - t0, 'solver_specific_stats': solver_specific_stats, 'num_iters': res.cpg_info.iter}
    prob._solution = Solution(prob.status, prob.value, primal_vars, dual_vars, attr)
    results_dict = {'solver_specific_stats': solver_specific_stats,
                    'num_iters': res.cpg_info.iter,
                    'solve_time': t1 - t0}
    prob._solver_stats = SolverStats.from_dict(results_dict, 'QOCO')

    return prob.value


def cpg_gradient(prob, gradient_sol_primal=None, gradient_sol_dual=None):

    # set gradient primal and dual solutions if provided
    gradient_sol = cpg_module.mpc_socp__cpg_gsol()
    if gradient_sol_primal is not None and gradient_sol_dual is not None:
        gradient_sol.primal = list(gradient_sol_primal)
        gradient_sol.dual = list(gradient_sol_dual)
        use_sol = True
    else:
        gradient_sol.primal = [0] * 1272
        gradient_sol.dual = [0] * 1578
        use_sol = False

    # set variable deltas
    vdelta = cpg_module.mpc_socp__cpg_vdelta()
    vdelta.var3963 = list(prob.var_dict["var3963"].gradient.flatten(order="F"))
    vdelta.var3964 = list(prob.var_dict["var3964"].gradient.flatten(order="F"))
    pdelta = cpg_module.gradient(vdelta, gradient_sol, use_sol)
    prob.param_dict['param3972'].gradient = np.array(pdelta.param3972).reshape((14, 34), order='F')
    prob.param_dict['param3965'].gradient = np.array(pdelta.param3965).reshape(14)
    prob.param_dict['param3966'].gradient = np.array(pdelta.param3966).reshape((14, 35), order='F')
    prob.param_dict['param3969'].gradient = np.array(pdelta.param3969).reshape((14, 476), order='F')
    prob.param_dict['param3970'].gradient = np.array(pdelta.param3970).reshape((14, 102), order='F')
    prob.param_dict['param3967'].gradient = np.array(pdelta.param3967).reshape((3, 34), order='F')
    prob.param_dict['param3968'].gradient = np.array(pdelta.param3968).reshape(34)


def forward(params, context):

    info = {}
    kwargs = context.solver_args.copy()
    prob = kwargs.pop("problem")
    parameters = prob.parameters()
    for pid, val in zip(context.param_ids, params):
        next(p for p in parameters if p.id == pid).value = val
    updated_params = kwargs.pop("updated_params", None)
    _, info["gradient_primal"], info["gradient_dual"] = cpg_solve_and_gradient_info(prob, updated_params, **kwargs)
    info["prob"] = prob

    vars = prob.variables()
    return [next(v for v in vars if v.id == variable.id).value for variable in context.variables], info


def backward(dvars, context):

    prob = context.info["prob"]
    vars = prob.variables()
    for variable, dv in zip(context.variables, dvars):
        next(v for v in vars if v.id == variable.id).gradient = dv
    gradient_primal = context.info["gradient_primal"]
    gradient_dual = context.info["gradient_dual"]
    cpg_gradient(prob, gradient_primal, gradient_dual)

    params = prob.parameters()
    return [next(p for p in params if p.id == pid).gradient for pid in context.param_ids], {}
